/**
 * @swagger
 * components:
 *   schemas:
 *     Log:
 *       type: object
 *       required:
 *         - issue_id
 *         - message
 *         - created_at
 *       properties:
 *         _id:
 *           type: string
 *           description: Log ID
 *         issue_id:
 *           type: string
 *           description: Unique incident ID (matches Sentry if applicable)
 *         message:
 *           type: string
 *           description: Error message
 *         description:
 *           type: string
 *           description: Detailed description (useful for manual logs)
 *         culprit:
 *           type: string
 *           description: Main cause of the error
 *         error_type:
 *           type: string
 *           enum: ['error', 'warning', 'info']
 *           description: Error type
 *         environment:
 *           type: string
 *           enum: ['testing', 'development', 'production']
 *           description: Execution environment
 *         status:
 *           type: string
 *           enum: ['unresolved', 'in review', 'solved']
 *           description: Log status
 *         priority:
 *           type: string
 *           enum: ['low', 'medium', 'high', 'critical']
 *           description: Log priority level
 *         assigned_to:
 *           type: string
 *           description: User assigned to resolve the log
 *         created_at:
 *           type: string
 *           format: date-time
 *           description: Date and time the log was created
 *         last_seen_at:
 *           type: string
 *           format: date-time
 *           description: Last time this incident was detected (traceability)
 *         count:
 *           type: integer
 *           description: Number of times this incident has occurred (traceability)
 *         active:
 *           type: boolean
 *           description: Indicates whether the log is active (for logical deletion)
 *         json_sentry:
 *           type: object
 *           description: Sentry's full payload
 */

/**
 * @swagger
 * /logs:
 *   get:
 *     summary: Get all logs (with filters and pagination)
 *     tags: [Logs]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 10
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Global search with multiple fields
 *       - in: query
 *         name: issue_id
 *         schema:
 *           type: string
 *         description: Filter by incident ID
 *       - in: query
 *         name: message
 *         schema:
 *           type: string
 *         description: Filter by log message
 *       - in: query
 *         name: error_type
 *         schema:
 *           type: string
 *           enum: ['error', 'warning', 'info']
 *         description: Error type
 *       - in: query
 *         name: environment
 *         schema:
 *           type: string
 *           enum: ['testing', 'development', 'production']
 *         description: Execution environment
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: ['unresolved', 'in review', 'solved']
 *         description: Log status
 *       - in: query
 *         name: priority
 *         schema:
 *           type: string
 *           enum: ['low', 'medium', 'high', 'critical']
 *         description: Log priority
 *       - in: query
 *         name: assigned_to
 *         schema:
 *           type: string
 *         description: Assigned user
 *       - in: query
 *         name: active
 *         schema:
 *           type: boolean
 *         description: Filter by active/inactive logs
 *       - in: query
 *         name: hash
 *         schema:
 *           type: string
 *         description: Unique identifier generated by culprit, error_type, and environment
 *       - in: query
 *         name: error_signature
 *         schema:
 *           type: string
 *         description: Filter by error signature
 *       - in: query
 *         name: date
 *         schema:
 *           type: string
 *           format: date
 *         description: "Filter logs by specific date (format: YYYY-MM-DD)"
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: desc
 *         description: Sort order (ascending or descending)

 *     responses:
 *       200:
 *         description: Logs retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 page:
 *                   type: integer
 *                 limit:
 *                   type: integer
 *                 total:
 *                   type: integer
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Log'
 *       401:
 *         description: Missing or invalid token
 *       403:
 *         description: Access denied
 *       500:
 *         description: Server error
 */

/**
 * @swagger
 * /logs/{id}:
 *   get:
 *     summary: Get a log by ID
 *     tags: [Logs]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Log found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Log'
 *       404:
 *         description: Log not found
 */

/**
 * @swagger
 * /logs:
 *   post:
 *     summary: Create a new log
 *     tags: [Logs]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Log'
 *     responses:
 *       201:
 *         description: Log created successfully
 *       400:
 *         description: Invalid data
 */

/**
 * @swagger
 * /logs/{id}:
 *   patch:
 *     summary: Update an existing log
 *     tags: [Logs]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Log'
 *     responses:
 *       200:
 *         description: Log updated successfully
 *       404:
 *         description: Log not found
 */

/**
 * @swagger
 * /logs/{id}:
 *   delete:
 *     summary: Delete a log
 *     tags: [Logs]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Log deleted successfully
 *       404:
 *         description: Log not found
 */
